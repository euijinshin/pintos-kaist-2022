Kernel command line: -q -mlfqs run mlfqs-block
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  52,377,600 loops/s.
Boot complete.
Executing 'mlfqs-block':
(mlfqs-block) begin
(mlfqs-block) Main thread acquiring lock.
(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
(mlfqs-block) Block thread spinning for 20 seconds...
(mlfqs-block) Block thread acquiring lock...
(mlfqs-block) Main thread spinning for 5 seconds...
(mlfqs-block) Main thread releasing lock.
(mlfqs-block) Block thread should have already acquired lock.
(mlfqs-block) end
Execution of 'mlfqs-block' complete.
Ti(mlfqs-block) ...got it.
Kernel PANIC at ../../lib/kernel/console.c:173 in putchar_have_lock(): assertion `console_locked_by_current_thread ()' failed.
Call stack: 0x8004214150 0x80042174d4 0x8004217475 0x800421169c 0x8004235000 0x8004211653 0x800420de25 0x800420681b 0x80042067dd 0x800420613d.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 3042 ticks
Thread: 499 idle ticks, 2543 kernel ticks, 0 user ticks
Console: 1